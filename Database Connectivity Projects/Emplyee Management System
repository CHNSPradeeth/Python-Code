import tkinter as tk
from tkinter import ttk, messagebox
import mysql.connector
import bcrypt
import re

# Define the database connection parameters
host = 'localhost'
user = 'root'
password = 'Cnsp2003'
database = 'mydatabase'

# Establish a connection to the database
cnx = mysql.connector.connect(
    host=host,
    user=user,
    password=password,
    database=database
)

# Create a cursor object to execute SQL queries
cursor = cnx.cursor()

# Define a class to represent an employee
class Employee:
    def __init__(self, emp_id, name, email, phone, payroll, salary):
        self.emp_id = emp_id
        self.name = name
        self.email = email
        self.phone = phone
        self.payroll = payroll
        self.salary = salary

# GUI class for handling the graphical interface
class GUI:
    def __init__(self):
        self.login_window = None
        # Create the login window at initialization
        self.create_login_window()

    # Function to create the login window
    def create_login_window(self):
        self.login_window = tk.Tk()
        self.login_window.title("Login")
        self.login_window.geometry("800x800")
        self.login_window.resizable(False, False)
        self.login_window.configure(bg='light blue')

        # Labels and input fields for login credentials
        self.create_label(self.login_window, "Employee Management System", 0, 0, 2, font=('Arial', 18, 'bold'))
        self.create_label(self.login_window, "Username:", 1, 0)
        self.username_entry = self.create_entry(self.login_window, 1, 1)
        self.create_label(self.login_window, "Password:", 2, 0)
        self.password_entry = self.create_entry(self.login_window, 2, 1, show='*')

        # Login, Sign Up, and Delete Account buttons
        self.create_button(self.login_window, "Login", self.check_login, 3, 0, 2)
        self.create_button(self.login_window, "Create Account", self.create_account_window, 4, 0, 1)
        self.create_button(self.login_window, "Delete Account", self.delete_account_window, 4, 1, 1)
        self.create_button(self.login_window, "Forgot Password", self.reset_password_window, 5, 0, 2)

    # Function to create a label with provided properties
    def create_label(self, parent, text, row, column, columnspan=1, font=('Arial', 14), bg='light blue'):
        label = tk.Label(parent, text=text, font=font, bg=bg)
        label.grid(row=row, column=column, columnspan=columnspan, padx=10, pady=10, sticky='w')
        return label

    # Function to create an entry widget
    def create_entry(self, parent, row, column, show=None):
        entry = tk.Entry(parent, font=('Arial', 14), show=show)
        entry.grid(row=row, column=column, padx=10, pady=10)
        return entry

    # Function to create a button
    def create_button(self, parent, text, command, row, column, columnspan=1):
        button = tk.Button(parent, text=text, command=command, font=('Arial', 14), bg='white')
        button.grid(row=row, column=column, columnspan=columnspan, padx=10, pady=10)
        return button

    # Function to create the account window
    def create_account_window(self):
        self.sign_up_window = tk.Toplevel(self.login_window)
        self.sign_up_window.title("Create Account")
        self.sign_up_window.geometry("400x250")
        self.sign_up_window.resizable(False, False)
        self.sign_up_window.configure(bg='light green')

        # Labels and input fields for creating a new account
        self.create_label(self.sign_up_window, "Create New Account", 0, 0, 2, font=('Arial', 18, 'bold'))
        self.create_label(self.sign_up_window, "Username:", 1, 0)
        self.sign_up_username_entry = self.create_entry(self.sign_up_window, 1, 1)
        self.create_label(self.sign_up_window, "Password:", 2, 0)
        self.sign_up_password_entry = self.create_entry(self.sign_up_window, 2, 1, show='*')
        self.create_label(self.sign_up_window, "Role (Admin/User):", 3, 0)
        self.role_entry = self.create_entry(self.sign_up_window, 3, 1)
        self.create_button(self.sign_up_window, "Create Account", self.create_account, 4, 0, 2)

    # Function to create the delete account window
    def delete_account_window(self):
        self.delete_account_window = tk.Toplevel(self.login_window)
        self.delete_account_window.title("Delete Account")
        self.delete_account_window.geometry("400x200")
        self.delete_account_window.resizable(False, False)
        self.delete_account_window.configure(bg='light coral')

        # Labels and input fields for deleting an account
        self.create_label(self.delete_account_window, "Delete Account", 0, 0, 2, font=('Arial', 18, 'bold'))
        self.create_label(self.delete_account_window, "Username:", 1, 0)
        self.delete_username_entry = self.create_entry(self.delete_account_window, 1, 1)
        self.create_button(self.delete_account_window, "Delete Account", self.delete_account, 2, 0, 2)

    # Function to create a new account
    def create_account(self):
        username = self.sign_up_username_entry.get()
        password = self.sign_up_password_entry.get()
        role = self.role_entry.get().lower()

        # Validate inputs
        if not username or not password or role not in ['admin', 'user']:
            messagebox.showerror("Error", "All fields are required and role must be 'Admin' or 'User'.")
            return

        # Hash the password
        hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

        # Insert new user credentials into the clients table
        cursor.execute("INSERT INTO clients (username, password, role) VALUES (%s, %s, %s)", (username, hashed_password, role))
        cnx.commit()

        # Show success message
        messagebox.showinfo("Success", "Account created successfully!")
        self.sign_up_window.destroy()

    # Function to delete an account
    def delete_account(self):
        username = self.delete_username_entry.get()

        # Delete user credentials from the clients table
        cursor.execute("DELETE FROM clients WHERE username = %s", (username,))
        cnx.commit()

        # Show success message
        messagebox.showinfo("Success", "Account deleted successfully!")
        self.delete_account_window.destroy()

    # Function to reset password window
    def reset_password_window(self):
        self.reset_window = tk.Toplevel(self.login_window)
        self.reset_window.title("Reset Password")
        self.reset_window.geometry("400x200")
        self.reset_window.resizable(False, False)
        self.reset_window.configure(bg='light yellow')

        self.create_label(self.reset_window, "Enter Username:", 0, 0)
        self.reset_username_entry = self.create_entry(self.reset_window, 0, 1)
        self.create_button(self.reset_window, "Send Reset Link", self.send_reset_link, 1, 0, 2)

    # Function to send password reset link (or perform reset logic)
    def send_reset_link(self):
        username = self.reset_username_entry.get()

        # Verify if the username exists
        cursor.execute("SELECT email FROM clients WHERE username = %s", (username,))
        user = cursor.fetchone()

        if user:
            email = user[0]
            # Here you could send an email or perform further actions to reset the password
            messagebox.showinfo("Reset Password", f"Password reset link sent to {email}")
        else:
            messagebox.showerror("Error", "Username not found")

    # Function to check login credentials
    def check_login(self):
        username = self.username_entry.get()
        password = self.password_entry.get()

        # Verify user credentials
        cursor.execute("SELECT password, role FROM clients WHERE username = %s", (username,))
        user = cursor.fetchone()

        if user and bcrypt.checkpw(password.encode('utf-8'), user[0].encode('utf-8')):
            # If credentials are correct, store role and open the main window
            self.user_role = user[1]
            self.login_window.destroy()
            self.create_main_window()
        else:
            # Show error if credentials are invalid
            messagebox.showerror("Error", "Invalid username or password")

    # Function to create the main window after successful login
    def create_main_window(self):
        self.main_window = tk.Tk()
        self.main_window.title("Employee Management System")
        self.main_window.geometry("1000x1000")
        self.main_window.resizable(False, False)
        self.main_window.config(bg='light green')

        # Input fields for employee data
        self.create_label(self.main_window, "Employee Management System", 0, 0, 2, font=('Arial', 24, 'bold'))
        self.create_label(self.main_window, "ID:", 1, 0)
        self.id_entry = self.create_entry(self.main_window, 1, 1)
        self.create_label(self.main_window, "Name:", 2, 0)
        self.name_entry = self.create_entry(self.main_window, 2, 1)
        self.create_label(self.main_window, "Email:", 3, 0)
        self.email_entry = self.create_entry(self.main_window, 3, 1)
        self.create_label(self.main_window, "Phone:", 4, 0)
        self.phone_entry = self.create_entry(self.main_window, 4, 1)
        self.create_label(self.main_window, "Payroll:", 5, 0)
        self.payroll_entry = self.create_entry(self.main_window, 5, 1)
        self.create_label(self.main_window, "Salary:", 6, 0)
        self.salary_entry = self.create_entry(self.main_window, 6, 1)

        # Buttons for employee operations
        self.create_button(self.main_window, "New Employee", self.new_employee, 7, 0, 2)
        self.create_button(self.main_window, "Employees List", self.new_employee_list_window, 8, 0, 2)
        self.create_button(self.main_window, "Update Employee", self.update_employee, 9, 0, 2)
        self.create_button(self.main_window, "Delete Employee", self.delete_employee, 10, 0, 2)
        self.create_button(self.main_window, "Sign Out", self.sign_out, 11, 0, 2)

        # Add search feature
        self.create_label(self.main_window, "Search Employee by Name:", 12, 0)
        self.search_entry = self.create_entry(self.main_window, 12, 1)
        self.create_label(self.main_window, "Search Employee by ID:", 13, 0)
        self.search_id_entry = self.create_entry(self.main_window, 13, 1)
        self.create_label(self.main_window, "Search Employee by Email:", 14, 0)
        self.search_email_entry = self.create_entry(self.main_window, 14, 1)
        self.create_button(self.main_window, "Search", self.search_employee, 15, 0, 2)

        # Add database backup and restore buttons
        self.create_button(self.main_window, "Backup Database", self.backup_database, 16, 0, 2)
        self.create_button(self.main_window, "Restore Database", self.restore_database, 17, 0, 2)

        # Add a toggle button for dark mode
        self.create_button(self.main_window, "Toggle Dark Mode", self.toggle_theme, 18, 0, 2)

        # Disable features based on user role
        if self.user_role == 'user':
            self.create_button(self.main_window, "Restricted Area", self.restricted_area, 19, 0, 2)

    # Function to toggle dark/light mode
    def toggle_theme(self):
        if self.main_window.cget('bg') == 'light green':
            self.main_window.config(bg='black')
            for widget in self.main_window.winfo_children():
                widget.config(bg='black', fg='white')
        else:
            self.main_window.config(bg='light green')
            for widget in self.main_window.winfo_children():
                widget.config(bg='light green', fg='black')

    # Function to add a new employee
    def new_employee(self):
        if self.user_role != 'admin':
            messagebox.showerror("Permission Denied", "You do not have permission to add employees.")
            return

        emp_id = self.id_entry.get()
        name = self.name_entry.get()
        email = self.email_entry.get()
        phone = self.phone_entry.get()
        payroll = self.payroll_entry.get()
        salary = self.salary_entry.get()

        # Validate inputs
        if not (emp_id and name and email and phone and payroll and salary):
            messagebox.showerror("Error", "All fields must be filled.")
            return

        if not self.validate_email(email):
            messagebox.showerror("Error", "Invalid email format.")
            return

        if not self.validate_phone(phone):
            messagebox.showerror("Error", "Invalid phone number format. Must be 10 digits.")
            return

        if not self.validate_salary(salary):
            messagebox.showerror("Error", "Invalid salary. Please enter a number.")
            return

        try:
            # Insert new employee details into the database
            cursor.execute("INSERT INTO employees (id, name, email, phone, payroll, salary) VALUES (%s, %s, %s, %s, %s, %s)", 
                           (emp_id, name, email, phone, payroll, salary))
            cnx.commit()

            # Show success message
            messagebox.showinfo("Success", "Employee added successfully!")
        except mysql.connector.Error as err:
            messagebox.showerror("Error", f"Failed to add employee: {err}")

    # Function to validate phone number format
    def validate_phone(self, phone):
        return re.match(r'^\d{10}$', phone)

    # Function to validate salary format
    def validate_salary(self, salary):
        try:
            float(salary)
            return True
        except ValueError:
            return False

    # Function to validate email format
    def validate_email(self, email):
        email_regex = r'^\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
        return re.match(email_regex, email) is not None

    # Function to search for an employee by name, ID, or email
    def search_employee(self):
        name = self.search_entry.get()
        emp_id = self.search_id_entry.get()
        email = self.search_email_entry.get()

        # Build dynamic query
        query = "SELECT * FROM employees WHERE 1=1"
        params = []

        if name:
            query += " AND name LIKE %s"
            params.append(f"%{name}%")

        if emp_id:
            query += " AND id = %s"
            params.append(emp_id)

        if email:
            query += " AND email = %s"
            params.append(email)

        cursor.execute(query, tuple(params))
        employee = cursor.fetchone()

        if employee:
            self.display_employee_details(*employee)
        else:
            messagebox.showerror("Error", "Employee not found!")

    # Function to display employee details in a new window
    def display_employee_details(self, emp_id, name, email, phone, payroll, salary):
        details_window = tk.Toplevel(self.main_window)
        details_window.title("Employee Details")
        details_window.geometry("400x400")
        details_window.configure(bg='light yellow')

        self.create_label(details_window, f"Employee ID: {emp_id}", 0, 0, columnspan=2, font=('Arial', 14, 'bold'), bg='light yellow')
        self.create_label(details_window, f"Name: {name}", 1, 0, columnspan=2, font=('Arial', 14, 'bold'), bg='light yellow')
        self.create_label(details_window, f"Email: {email}", 2, 0, columnspan=2, font=('Arial', 14, 'bold'), bg='light yellow')
        self.create_label(details_window, f"Phone: {phone}", 3, 0, columnspan=2, font=('Arial', 14, 'bold'), bg='light yellow')
        self.create_label(details_window, f"Payroll: {payroll}", 4, 0, columnspan=2, font=('Arial', 14, 'bold'), bg='light yellow')
        self.create_label(details_window, f"Salary: {salary}", 5, 0, columnspan=2, font=('Arial', 14, 'bold'), bg='light yellow')

        close_button = tk.Button(details_window, text="Close", command=details_window.destroy, font=('Arial', 12, 'bold'), bg='red', fg='white')
        close_button.grid(row=6, column=0, columnspan=2, pady=20)

    # Function to create a new window listing all employees
    def new_employee_list_window(self):
        new_window = tk.Toplevel(self.main_window)
        new_window.title("List of Employees")
        new_window.geometry("800x600")
        new_window.resizable(True, True)
        new_window.config(bg='light blue')

        self.create_label(new_window, "Employee List", 0, 0, columnspan=3, font=('Arial', 18, 'bold'), bg='light blue')

        tree = ttk.Treeview(new_window, columns=("ID", "Name", "Email", "Phone", "Payroll", "Salary"), show="headings")
        tree.heading("ID", text="ID")
        tree.heading("Name", text="Name")
        tree.heading("Email", text="Email")
        tree.heading("Phone", text="Phone")
        tree.heading("Payroll", text="Payroll")
        tree.heading("Salary", text="Salary")
        tree.column("ID", width=50)
        tree.column("Name", width=150)
        tree.column("Email", width=200)
        tree.column("Phone", width=100)
        tree.column("Payroll", width=100)
        tree.column("Salary", width=100)

        scrollbar = ttk.Scrollbar(new_window, orient="vertical", command=tree.yview)
        tree.configure(yscrollcommand=scrollbar.set)

        tree.grid(row=1, column=0, columnspan=2, sticky="nsew", padx=10, pady=10)
        scrollbar.grid(row=1, column=2, sticky="ns", pady=10)

        new_window.grid_rowconfigure(1, weight=1)
        new_window.grid_columnconfigure(0, weight=1)

        self.refresh_employee_list(tree)

        refresh_button = tk.Button(new_window, text="Refresh", command=lambda: self.refresh_employee_list(tree), font=('Arial', 12))
        refresh_button.grid(row=2, column=0, columnspan=3, pady=10)

    # Function to refresh the employee list in the Treeview
    def refresh_employee_list(self, tree):
        for item in tree.get_children():
            tree.delete(item)

        try:
            cursor.execute("SELECT id, name, email, phone, payroll, salary FROM employees")
            employees = cursor.fetchall()

            for employee in employees:
                tree.insert("", "end", values=employee)
        except mysql.connector.Error as err:
            messagebox.showerror("Database Error", f"An error occurred while fetching data: {err}")

    # Function to update an existing employee's information
    def update_employee(self):
        if self.user_role != 'admin':
            messagebox.showerror("Permission Denied", "You do not have permission to update employees.")
            return

        emp_id = self.id_entry.get()
        name = self.name_entry.get()
        email = self.email_entry.get()
        phone = self.phone_entry.get()
        payroll = self.payroll_entry.get()
        salary = self.salary_entry.get()

        # Validate inputs
        if not (emp_id and name and email and phone and payroll and salary):
            messagebox.showerror("Error", "All fields must be filled.")
            return

        if not self.validate_email(email):
            messagebox.showerror("Error", "Invalid email format.")
            return

        if not self.validate_phone(phone):
            messagebox.showerror("Error", "Invalid phone number format. Must be 10 digits.")
            return

        if not self.validate_salary(salary):
            messagebox.showerror("Error", "Invalid salary. Please enter a number.")
            return

        cursor.execute("SELECT * FROM employees WHERE id = %s", (emp_id,))
        existing_employee = cursor.fetchone()

        if existing_employee:
            cursor.execute("""
                UPDATE employees
                SET name = %s, email = %s, phone = %s, payroll = %s, salary = %s
                WHERE id = %s
            """, (name, email, phone, payroll, salary, emp_id))
            cnx.commit()

            messagebox.showinfo("Success", "Employee updated successfully!")
        else:
            messagebox.showerror("Error", "Employee with the given ID not found!")

    # Function to delete an employee
    def delete_employee(self):
        if self.user_role != 'admin':
            messagebox.showerror("Permission Denied", "You do not have permission to delete employees.")
            return

        emp_id = self.id_entry.get()

        cursor.execute("SELECT * FROM employees WHERE id = %s", (emp_id,))
        existing_employee = cursor.fetchone()

        if existing_employee:
            cursor.execute("DELETE FROM employees WHERE id = %s", (emp_id,))
            cnx.commit()
            messagebox.showinfo("Success", "Employee deleted successfully!")
        else:
            messagebox.showerror("Error", "Employee with the given ID not found!")

    # Function to backup the database
    def backup_database(self):
        try:
            backup_file = 'C:/backup/mydatabase_backup.sql'
            cursor.execute(f"BACKUP DATABASE {database} TO DISK = '{backup_file}'")
            messagebox.showinfo("Backup", "Database backup completed successfully!")
        except mysql.connector.Error as err:
            messagebox.showerror("Error", f"Database backup failed: {err}")

    # Function to restore the database from a backup
    def restore_database(self):
        try:
            restore_file = 'C:/backup/mydatabase_backup.sql'
            cursor.execute(f"RESTORE DATABASE {database} FROM DISK = '{restore_file}'")
            messagebox.showinfo("Restore", "Database restored successfully!")
        except mysql.connector.Error as err:
            messagebox.showerror("Error", f"Database restore failed: {err}")

    # Function to sign out and return to the login window
    def sign_out(self):
        self.main_window.destroy()
        self.create_login_window()

    # Function to handle restricted area access
    def restricted_area(self):
        messagebox.showinfo("Restricted Area", "You have access to the restricted area.")

if __name__ == "__main__":
    gui = GUI()
    gui.login_window.mainloop()

    # Close the database connection when the program finishes
    cnx.close()
